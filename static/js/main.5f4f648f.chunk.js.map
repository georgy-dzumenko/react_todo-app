{"version":3,"sources":["redux/actions.js","redux/types.js","components/Todo.js","components/TodoList.js","components/NewTodo.js","components/ToggleAllButton.js","components/Navigation.js","App.js","redux/todoReducer.js","redux/rootReducer.js","index.js"],"names":["toggleAll","value","type","payload","connect","deleteTodo","id","completeTodo","changeTitle","title","todo","useState","newTitle","setNewTitle","editing","setEditing","useEffect","document","getElementById","focus","key","className","completed","checked","onChange","event","onDoubleClick","onClick","target","onKeyDown","onBlur","state","todos","filteredTodos","setfilteredTodos","location","useLocation","console","log","pathname","includes","filter","map","addTodo","setTitle","onSubmit","Date","placeholder","toggleAllValue","some","htmlFor","Navigation","exact","to","activeClassName","clearCompleted","gotCompleted","localStorage","setItem","JSON","stringify","length","initialState","parse","getItem","selectedTodos","rootReducer","combineReducers","action","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render"],"mappings":"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","file":"static/js/main.5f4f648f.chunk.js","sourcesContent":["import { COMPLETE_TODO, CREATE_TODO, DELETE_TODO, CLEAR_COMPLETED, TOGGLE_ALL, CHANGE_TITLE } from \"./types\";\n\nexport function addTodo(todo) {\n  return({\n    type: CREATE_TODO,\n    payload: todo\n  })\n}\n\nexport function deleteTodo(id) {\n  return({\n    type: DELETE_TODO,\n    payload: id,\n  })\n}\n\nexport function completeTodo(id, value) {\n  return({\n    type: COMPLETE_TODO,\n    payload: {id, value},\n  })\n}\n\nexport function clearCompleted() {\n  return({\n    type: CLEAR_COMPLETED,\n  })\n}\n\nexport function toggleAll(value) {\n  return({\n    type: TOGGLE_ALL,\n    payload: value\n  })\n}\n\nexport function changeTitle(id, title) {\n  return({\n    type: CHANGE_TITLE,\n    payload: {id, title},\n  })\n}\n","export const CREATE_TODO = 'TODO/CREATE_TODO';\n\nexport const DELETE_TODO = 'TODO/DELETE_TODO'\n\nexport const COMPLETE_TODO = 'TODO/COMPLETE_TODO'\n\nexport const CLEAR_COMPLETED = 'TODO/CLEAR_COMPLETED'\n\nexport const TOGGLE_ALL = 'TODOS/TOGLE_ALL'\n\nexport const CHANGE_TITLE = 'CHANGE_TITLE'\n","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\";\nimport { deleteTodo, completeTodo, changeTitle } from \"../redux/actions\";\n\nconst Todo = ({ todo, deleteTodo, completeTodo, changeTitle }) => {\n  const [newTitle, setNewTitle] = useState(todo.title);\n  const [editing, setEditing] = useState(false);\n\n  useEffect(() => {\n    document.getElementById(`${todo.id}-edit`).focus()\n  }, [editing, todo])\n\n  return (\n    <li\n      key={`${todo.id}-key`}\n      className={\n        `${todo.completed\n          ? 'completed'\n          : ''\n        } ${editing\n          ? 'editing'\n          : ''\n        }`\n      }\n    >\n      <div className='view'>\n        <input\n          checked={todo.completed}\n          type=\"checkbox\"\n          className={`toggle ${todo.completed ? 'completed' : ''}`}\n          value={todo.completed}\n          onChange={\n            (event) => {\n              completeTodo(todo.id, !todo.completed)\n            }\n          }\n        />\n        <label\n          onDoubleClick={() => {\n            setEditing(true)\n          }}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        id={`${todo.id}-edit`}\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={\n          (event) => setNewTitle(event.target.value)\n        }\n        onKeyDown={(event) => {\n            if(event.key === 'Enter') {\n              changeTitle(changeTitle(todo.id, newTitle))\n              setEditing(false)\n            }\n            \n            if(event.key === 'Escape') {\n              setNewTitle(todo.title)\n              setEditing(false)\n            }\n\n            return\n          }\n        }\n        onBlur={(event) => {\n          changeTitle(todo.id, newTitle);\n          setEditing(false)\n        }}\n      />\n    </li>\n  )\n}\n\nexport default connect(null, { deleteTodo, completeTodo, changeTitle })(Todo);","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation, useRouteMatch } from \"react-router-dom\";\nimport {getCompleted, getActive} from '../redux/actions'\nimport Todo from \"./Todo\";\n\nconst TodoList = ({ todos }) => {\n  const [filteredTodos, setfilteredTodos] = useState(todos)\n  const location = useLocation()\n  console.log(location)\n\n  useEffect(() => {\n    if(location.pathname.includes('/completed')){\n      setfilteredTodos(todos.filter((todo) => todo.completed))\n      return\n    }\n\n    if(location.pathname.includes('/active')){\n      setfilteredTodos(todos.filter((todo) => !todo.completed))\n      return\n    }\n\n    setfilteredTodos(todos)\n  }, [todos, location])\n\n  return (\n    <ul className=\"todo-list\" key={'keyUL'}>\n      {filteredTodos.map(\n        (todo) => (\n          <Todo\n            todo={todo}\n          />\n        )\n      )}\n    </ul>\n  )\n}\n\nexport default connect(state => ({todos: state.todos.todos}), null)(TodoList);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../redux/actions'\n\nconst NewTodo = ({ addTodo }) => {\n  const [title, setTitle] = useState('');\n\n  return (\n    <form\n      onSubmit={() => {\n        if(title !== '') {\n          addTodo({title: title, id: +new Date(), completed: false});\n          setTitle('')\n        }\n      }}\n    >\n      <input\n        onChange={(event) => {\n          setTitle(event.target.value)\n        }}\n        value={title}\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  )\n}\n\nexport default connect(null, { addTodo })(NewTodo);;","import { connect } from \"react-redux\";\nimport { toggleAll } from \"../redux/actions\";\nimport React from 'react';\n\n\nconst ToggleAllButton = ({todos, toggleAll}) => {\n  const toggleAllValue = todos.some(todo => !todo.completed)\n\n  return(<>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={!toggleAllValue}\n      onClick={() => toggleAll(toggleAllValue)}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n</>)}\n\nexport default connect((state) => ({todos: state.todos.todos}), {toggleAll})(ToggleAllButton)","import { NavLink } from \"react-router-dom\"\n\nimport React from \"react\"\n\nexport const Navigation = () => (\n  <ul className=\"filters\">\n    <li\n      key={'all'}\n    >\n      <NavLink\n        exact\n        to={{\n          pathname: '/'\n        }}\n        activeClassName=\"selected\"\n      >\n        All\n      </NavLink>\n    </li>\n\n    <li\n      key={'active'}\n    >\n      <NavLink\n        exact\n        to={{\n          pathname: '/active'\n        }}\n        activeClassName=\"selected\"\n      >\n        active\n      </NavLink>\n    </li>\n\n    <li\n      key={'completed'}\n    >\n      <NavLink\n        exact\n        to={{\n          pathname: '/completed'\n        }}\n        activeClassName=\"selected\"\n      >\n        Completed\n      </NavLink>\n    </li>\n  </ul>\n)","import React, { useCallback, useEffect, useState } from 'react';\nimport TodoList from \"./components/TodoList\";\nimport { NavLink, useRouteMatch } from 'react-router-dom'\nimport NewTodo from './components/NewTodo'\nimport { connect } from 'react-redux';\nimport { clearCompleted, toggleAll } from './redux/actions'\nimport ToggleAllButton from './components/ToggleAllButton';\nimport { Navigation } from './components/Navigation'\n\nfunction App({todos, clearCompleted }) {\n  const gotCompleted = todos.some((todo) => todo.completed);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [ todos ])\n\n  return (\n    <section\n      className=\"todoapp\"\n    >\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodo />\n      </header>\n\n      <section className=\"main\">\n        <ToggleAllButton />\n\n        <TodoList />\n      </section>\n      {todos.length > 0\n        ? <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {todos.length} items left\n          </span>\n\n          <Navigation />          \n                \n          {gotCompleted ?\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n            : ''\n          }\n        </footer>\n        : ''\n      }\n    </section>\n  );\n}\n\nexport default connect((state) => ({todos: state.todos.todos}), {clearCompleted, toggleAll})(App);;\n","import { COMPLETE_TODO, CREATE_TODO, DELETE_TODO, CLEAR_COMPLETED, TOGGLE_ALL, CHANGE_TITLE } from \"./types\";\n\nconst initialState = {\n  todos: JSON.parse(localStorage.getItem('todos')) || [],\n  selectedTodos: JSON.parse(localStorage.getItem('todos')) || [],\n};\n\nexport const todoReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case CREATE_TODO:\n      return {...state, todos: [...state.todos, action.payload]}\n\n    case DELETE_TODO:\n      return {...state, todos: state.todos.filter((todo) => todo.id !== action.payload)}\n\n    case COMPLETE_TODO:\n      return {...state, todos: state.todos.map((todo) => {\n        if(todo.id === action.payload.id) {\n          return {\n            ...todo,\n            completed: action.payload.value\n          }\n        }\n        \n        return todo\n      })}\n\n    case CLEAR_COMPLETED:\n      return {...state, todos: state.todos.filter((todo) => !todo.completed)}\n\n    case TOGGLE_ALL:\n      return{...state, todos: state.todos.map((todo) => ({...todo, completed: action.payload}))}\n\n    case CHANGE_TITLE:\n      return {...state, todos: state.todos.map((todo) => {\n        console.log(action.payload.title)\n        if(todo.id === action.payload.id) {\n          return {\n            ...todo,\n            title: action.payload.title\n          }\n        }\n        \n        return todo\n      })}\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { todoReducer } from \"./todoReducer\";\n\nexport const rootReducer = combineReducers({\n  todos: todoReducer,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\nimport {HashRouter as Router} from 'react-router-dom'\nimport { Provider, connect } from 'react-redux'\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { rootReducer } from './redux/rootReducer';\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
{"version":3,"sources":["redux/actions.js","redux/types.js","components/Todo.js","components/TodoList.js","components/NewTodo.js","components/ToggleAllButton.js","components/TodosFilter.js","components/Footer.js","App.js","redux/todoReducer.js","redux/rootReducer.js","index.js"],"names":["clearCompleted","type","toggleAll","value","payload","classNames","require","mapActionsToProps","deleteTodo","id","completeTodo","changeTitle","title","connect","todo","useState","newTitle","setNewTitle","setTitle","editing","setEditing","todoObject","useRef","useEffect","current","focus","key","className","completed","checked","onChange","onDoubleClick","onClick","ref","event","target","onKeyDown","onBlur","trim","state","todos","filteredTodos","setfilteredTodos","location","useLocation","pathname","includes","filter","map","addTodo","addNewTodo","onSubmit","preventDefault","Date","placeholder","actions","toggleAllValue","some","htmlFor","FILTERS","TodosFilter","exact","to","activeClassName","gotCompleted","claear","length","localStorage","setItem","JSON","stringify","initialState","parse","getItem","rootReducer","combineReducers","action","store","createStore","compose","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61f89fc5.chunk.js","sourcesContent":["import {\n  COMPLETE_TODO,\n  CREATE_TODO,\n  DELETE_TODO,\n  CLEAR_COMPLETED,\n  TOGGLE_ALL,\n  CHANGE_TITLE,\n} from './types';\n\nexport function addTodo(todo) {\n  return ({\n    type: CREATE_TODO,\n    payload: todo,\n  });\n}\n\nexport function deleteTodo(id) {\n  return ({\n    type: DELETE_TODO,\n    payload: id,\n  });\n}\n\nexport function completeTodo(id) {\n  return ({\n    type: COMPLETE_TODO,\n    payload: id,\n  });\n}\n\nexport function clearCompleted() {\n  return ({\n    type: CLEAR_COMPLETED,\n  });\n}\n\nexport function toggleAll(value) {\n  return ({\n    type: TOGGLE_ALL,\n    payload: value,\n  });\n}\n\nexport function changeTitle(id, title) {\n  return ({\n    type: CHANGE_TITLE,\n    payload: { id, title },\n  });\n}\n","export const CREATE_TODO = 'TODO/CREATE_TODO';\n\nexport const DELETE_TODO = 'TODO/DELETE_TODO';\n\nexport const COMPLETE_TODO = 'TODO/COMPLETE_TODO';\n\nexport const CLEAR_COMPLETED = 'TODO/CLEAR_COMPLETED';\n\nexport const TOGGLE_ALL = 'TODOS/TOGLE_ALL';\n\nexport const CHANGE_TITLE = 'CHANGE_TITLE';\n","import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../redux/actions';\n\nconst classNames = require('classnames');\n\nconst Todo = ({ todo, deleteTodo, completeTodo, changeTitle }) => {\n  const [newTitle, setNewTitle] = useState(todo.title);\n  const [title, setTitle] = useState(todo.title);\n  const [editing, setEditing] = useState(false);\n\n  const todoObject = useRef(null);\n\n  useEffect(() => {\n    todoObject.current.focus();\n    setTitle(newTitle);\n  }, [editing, todo, newTitle]);\n\n  useEffect(() => {\n    setTitle(newTitle);\n  }, [newTitle]);\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames([\n        { completed: todo.completed },\n        { editing },\n      ])}\n    >\n      <div className=\"view\">\n        <input\n          checked={todo.completed}\n          type=\"checkbox\"\n          className={classNames([\n            'toggle',\n            { completed: todo.completed },\n          ])}\n          value={todo.completed}\n          onChange={\n            () => {\n              completeTodo(todo.id);\n            }\n          }\n        />\n        <label\n          onDoubleClick={() => {\n            setEditing(true);\n          }}\n          className=\"label\"\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        ref={todoObject}\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={\n          event => setNewTitle(event.target.value)\n        }\n        onKeyDown={(event) => {\n          if (event.key === 'Enter') {\n            setEditing(false);\n          }\n\n          if (event.key === 'Escape') {\n            setNewTitle(todo.title);\n            setEditing(false);\n          }\n        }\n        }\n        onBlur={() => {\n          if (newTitle.trim() !== '') {\n            changeTitle(todo.id, newTitle);\n          } else {\n            setNewTitle(todo.title);\n          }\n\n          setEditing(false);\n        }}\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.arrayOf(\n    PropTypes.shape(),\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nconst mapActionsToProps = {\n  deleteTodo: actions.deleteTodo,\n  completeTodo: actions.completeTodo,\n  changeTitle: actions.changeTitle,\n};\n\nexport default connect(null, mapActionsToProps)(Todo);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos }) => {\n  const [filteredTodos, setfilteredTodos] = useState(todos);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (location.pathname.includes('/completed')) {\n      setfilteredTodos(todos.filter(todo => todo.completed));\n\n      return;\n    }\n\n    if (location.pathname.includes('/active')) {\n      setfilteredTodos(todos.filter(todo => !todo.completed));\n\n      return;\n    }\n\n    setfilteredTodos(todos);\n  }, [todos, location]);\n\n  return (\n    <ul className=\"todo-list\" key=\"keyUL\">\n      {filteredTodos.map(\n        todo => (\n          <Todo\n            key={`${todo.id}-todo`}\n            todo={todo}\n          />\n        ),\n      )}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n};\n\nexport default connect(state => ({ todos: state.todos.todos }), null)(TodoList);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addTodo } from '../redux/actions';\n\nconst NewTodo = ({ addTodo: addNewTodo }) => {\n  const [title, setTitle] = useState('');\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (title.trim() !== '') {\n          addNewTodo({\n            title,\n            id: +new Date(),\n            completed: false,\n          });\n          setTitle('');\n        }\n      }}\n    >\n      <input\n        onChange={(event) => {\n          setTitle(event.target.value);\n        }}\n        value={title}\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { addTodo })(NewTodo);\n","import { connect } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as actions from '../redux/actions';\n\nconst ToggleAllButton = ({ toggleAllValue, toggleAll }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={!toggleAllValue}\n      onClick={() => toggleAll(toggleAllValue)}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nToggleAllButton.propTypes = {\n  toggleAllValue: PropTypes.bool.isRequired,\n  toggleAll: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  toggleAllValue: state.todos.todos.some(\n    todo => !todo.completed,\n  ),\n});\n\nconst mapActionsToProps = { toggleAll: actions.toggleAll };\n\nexport default connect(mapStateToProps, mapActionsToProps)(ToggleAllButton);\n","import { NavLink } from 'react-router-dom';\n\nimport React from 'react';\n\nconst FILTERS = {\n  all: '/',\n  active: '/active',\n  completed: '/completed',\n};\n\nexport const TodosFilter = () => (\n  <ul className=\"filters\">\n    <li\n      key=\"all\"\n    >\n      <NavLink\n        exact\n        to={{\n          pathname: FILTERS.all,\n        }}\n        activeClassName=\"selected\"\n      >\n        All\n      </NavLink>\n    </li>\n\n    <li\n      key=\"active\"\n    >\n      <NavLink\n        exact\n        to={{\n          pathname: FILTERS.active,\n        }}\n        activeClassName=\"selected\"\n      >\n        active\n      </NavLink>\n    </li>\n\n    <li\n      key=\"completed\"\n    >\n      <NavLink\n        exact\n        to={{\n          pathname: FILTERS.completed,\n        }}\n        activeClassName=\"selected\"\n      >\n        Completed\n      </NavLink>\n    </li>\n  </ul>\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { TodosFilter } from './TodosFilter';\nimport { clearCompleted } from '../redux/actions';\n\nconst Footer = ({ gotCompleted, todos, clearCompleted: claear }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {todos.filter(todo => !todo.completed).length}\n      {' '}\n      items left\n    </span>\n\n    <TodosFilter />\n\n    {gotCompleted && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={claear}\n      >\n        Clear completed\n      </button>\n    )}\n  </footer>\n);\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  gotCompleted: PropTypes.bool.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todos.todos,\n  gotCompleted: state.todos.todos.some(\n    todo => todo.completed,\n  ),\n});\n\nexport default connect(mapStateToProps, { clearCompleted })(Footer);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TodoList from './components/TodoList';\nimport NewTodo from './components/NewTodo';\nimport { clearCompleted, toggleAll } from './redux/actions';\nimport ToggleAllButton from './components/ToggleAllButton';\nimport Footer from './components/Footer';\n\nfunction App({ todos }) {\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <section\n      className=\"todoapp\"\n    >\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodo />\n      </header>\n\n      <section className=\"main\">\n        {todos.length > 0\n          ? <ToggleAllButton />\n          : ''\n        }\n\n        <TodoList />\n      </section>\n\n      {todos.length > 0\n        ? <Footer />\n        : ''\n      }\n    </section>\n  );\n}\n\nApp.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todos.todos,\n});\n\nexport default connect(mapStateToProps, { clearCompleted, toggleAll })(App);\n","import {\n  COMPLETE_TODO,\n  CREATE_TODO,\n  DELETE_TODO,\n  CLEAR_COMPLETED,\n  TOGGLE_ALL,\n  CHANGE_TITLE,\n} from './types';\n\nconst initialState = {\n  todos: JSON.parse(localStorage.getItem('todos')) || [],\n};\n\nexport const todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_TODO:\n      return { ...state, todos: [action.payload, ...state.todos] };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(\n          todo => todo.id !== action.payload,\n        ),\n      };\n\n    case COMPLETE_TODO:\n      return { ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.payload) {\n            return {\n              ...todo,\n              completed: !todo.completed,\n            };\n          }\n\n          return todo;\n        }) };\n\n    case CLEAR_COMPLETED:\n      return { ...state, todos: state.todos.filter(todo => !todo.completed) };\n\n    case TOGGLE_ALL:\n      return {\n        ...state,\n        todos: state.todos.map(\n          todo => ({ ...todo, completed: action.payload }),\n        ),\n      };\n\n    case CHANGE_TITLE:\n      return { ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.payload.id) {\n            return {\n              ...todo,\n              title: action.payload.title,\n            };\n          }\n\n          return todo;\n        }) };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { todoReducer } from './todoReducer';\n\nexport const rootReducer = combineReducers({\n  todos: todoReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { compose, createStore } from 'redux';\nimport App from './App';\nimport { rootReducer } from './redux/rootReducer';\n\nconst store = createStore(rootReducer, compose(\n  /* eslint-disable no-underscore-dangle */\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}